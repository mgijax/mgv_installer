#!/bin/bash
#
# The purpose of mgv_installer is to install both the MGV front end (mgv) and back end (mgv_data) 
# so that they talk to each other and the mgv is accessible via URL at the right location.

# With no arguments, installs the versions of mgv and mgv_data defined in Configuration.
# You can override these settings on the command line with these args:
#       -m VER   Specifies the version of mgv to install. VER is a branch or tag name
#       -d VER   Specifies the version of mgv_data to install. VER is a branch or tag name
#

cd `dirname $0`
if [ ! -e Configuration ]; then
  echo "No configuration file."
  exit 1
fi
source Configuration

until [ -z "$1" ]  # Until all parameters used up . . .
do
    case "$1" in
    -m) 
        shift
        SPECIFIED_MGV_VER=true
        CMDLINE_MGV_VER=$1
        nargs=$((nargs-2))
        ;;  
    -d) 
        shift
        SPECIFIED_MGVDATA_VER=true
        CMDLINE_MGVDATA_VER=$1
        nargs=$((nargs-2))
        ;;  
    *)
        echo "Unrecognized option:" $1
        exit -1
    esac
    shift
done

if [[ "${SPECIFIED_MGV_VER}" == "true" || "${SPECIFIED_MGVDATA_VER}" == "true" ]]; then
    INSTALL_MGV=false
    INSTALL_MGVDATA=false
    if [[ "${SPECIFIED_MGV_VER}" != "" ]] ; then
        INSTALL_MGV=true
        export MGV_VER="${CMDLINE_MGV_VER}"
    fi
    if [[ "${SPECIFIED_MGVDATA_VER}" != "" ]] ; then
        INSTALL_MGVDATA=true
        export MGVDATA_VER="${CMDLINE_MGVDATA_VER}"
    fi
fi 

#----------------------------------------
# mgv_data
#
# To install, clone the repo, switch to the desired branch/tag, and update the wrapperConfig.
# Then compile the config to create the build script.
#

if [[ "${INSTALL_MGVDATA}" == "true" ]]; then
    echo "Installing mgv_data"
    # remove current install if it exists
    rm -fr ${MGVDATA_DIR}
    # clone the repo and cd to it
    git clone git@github.com:mgijax/mgv_data.git ${MGVDATA_DIR}
    cd ${MGVDATA_DIR}
    #
    if [[ "${MGVDATA_VER}" == "" ]]; then
        export MGVDATA_VER=`git describe --tags --abbrev=0`
    fi
    git checkout ${MGVDATA_VER}
    #
    echo "Updating wrapperConfig.sh"
    sed -i "s@^export OROOTDIR=.*@export OROOTDIR=\"${MGVDATA_DROOT}\"@" bin/wrapperConfig.sh
    sed -i "s@^export TABIX=.*@export TABIX=\"${TABIX}\"@" bin/wrapperConfig.sh
    sed -i "s@^export SAMTOOLS=.*@export SAMTOOLS=\"${SAMTOOLS}\"@" bin/wrapperConfig.sh
    sed -i "s@^export BGZIP=.*@export BGZIP=\"$(dirname $SAMTOOLS)/bgzip\"@" bin/wrapperConfig.sh
    sed -i "s@^export PYTHON=.*@export PYTHON=\"${PYTHON}\"@" bin/wrapperConfig.sh

    #
    echo "Compiling build config into build script"
    bin/compileConfig.sh config.yaml build.sh
fi

#----------------------------------------
# mgv
#
# To build, clone the repo, switch to the specified branch/tag, then use npm
# to install dependencies and build the web dist. Then create soft links to
# (a) hook mgv up with the data from mgv_data and (b) set the top-level path to
# the app.
#

if [[ ${INSTALL_MGV} == "true" ]] ; then
    echo "Installing mgv"
    rm -fr ${MGV_DIR}
    git clone git@github.com:mgijax/mgv.git ${MGV_DIR}
    cd ${MGV_DIR}
    #
    if [[ "${MGV_VER}" == "" ]]; then
        export MGV_VER=`git describe --tags --abbrev=0`
    fi
    git checkout ${MGV_VER}
    #

    npm install
    npm run build
    #
    rm -f dist/mgv_web_data
    ln -s ${MGVDATA_DROOT}/output dist/mgv_web_data
    #
    rm -f ${MGV_SOFT_LINK}
    ln -s ${MGV_DIR}/dist ${MGV_SOFT_LINK}
fi
